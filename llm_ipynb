{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "221bb800-0193-4108-8e9c-2cefcd96ffe9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting openai\n",
      "  Downloading openai-1.78.1-py3-none-any.whl.metadata (25 kB)\n",
      "Requirement already satisfied: streamlit in c:\\users\\riyac\\anaconda3\\lib\\site-packages (1.37.1)\n",
      "Requirement already satisfied: anyio<5,>=3.5.0 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from openai) (4.2.0)\n",
      "Requirement already satisfied: distro<2,>=1.7.0 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from openai) (1.9.0)\n",
      "Requirement already satisfied: httpx<1,>=0.23.0 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from openai) (0.27.0)\n",
      "Collecting jiter<1,>=0.4.0 (from openai)\n",
      "  Downloading jiter-0.9.0-cp312-cp312-win_amd64.whl.metadata (5.3 kB)\n",
      "Requirement already satisfied: pydantic<3,>=1.9.0 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from openai) (2.8.2)\n",
      "Requirement already satisfied: sniffio in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from openai) (1.3.0)\n",
      "Requirement already satisfied: tqdm>4 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from openai) (4.66.5)\n",
      "Requirement already satisfied: typing-extensions<5,>=4.11 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from openai) (4.11.0)\n",
      "Requirement already satisfied: altair<6,>=4.0 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from streamlit) (5.0.1)\n",
      "Requirement already satisfied: blinker<2,>=1.0.0 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from streamlit) (1.6.2)\n",
      "Requirement already satisfied: cachetools<6,>=4.0 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from streamlit) (5.3.3)\n",
      "Requirement already satisfied: click<9,>=7.0 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from streamlit) (8.1.7)\n",
      "Requirement already satisfied: numpy<3,>=1.20 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from streamlit) (1.26.4)\n",
      "Requirement already satisfied: packaging<25,>=20 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from streamlit) (24.1)\n",
      "Requirement already satisfied: pandas<3,>=1.3.0 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from streamlit) (2.2.2)\n",
      "Requirement already satisfied: pillow<11,>=7.1.0 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from streamlit) (9.5.0)\n",
      "Requirement already satisfied: protobuf<6,>=3.20 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from streamlit) (4.25.3)\n",
      "Requirement already satisfied: pyarrow>=7.0 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from streamlit) (16.1.0)\n",
      "Requirement already satisfied: requests<3,>=2.27 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from streamlit) (2.32.3)\n",
      "Requirement already satisfied: rich<14,>=10.14.0 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from streamlit) (13.7.1)\n",
      "Requirement already satisfied: tenacity<9,>=8.1.0 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from streamlit) (8.2.3)\n",
      "Requirement already satisfied: toml<2,>=0.10.1 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from streamlit) (0.10.2)\n",
      "Requirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from streamlit) (3.1.43)\n",
      "Requirement already satisfied: pydeck<1,>=0.8.0b4 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from streamlit) (0.8.0)\n",
      "Requirement already satisfied: tornado<7,>=6.0.3 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from streamlit) (6.4.1)\n",
      "Requirement already satisfied: watchdog<5,>=2.1.5 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from streamlit) (4.0.1)\n",
      "Requirement already satisfied: jinja2 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from altair<6,>=4.0->streamlit) (3.1.4)\n",
      "Requirement already satisfied: jsonschema>=3.0 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from altair<6,>=4.0->streamlit) (4.23.0)\n",
      "Requirement already satisfied: toolz in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from altair<6,>=4.0->streamlit) (0.12.0)\n",
      "Requirement already satisfied: idna>=2.8 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from anyio<5,>=3.5.0->openai) (3.7)\n",
      "Requirement already satisfied: colorama in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from click<9,>=7.0->streamlit) (0.4.6)\n",
      "Requirement already satisfied: gitdb<5,>=4.0.1 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.7)\n",
      "Requirement already satisfied: certifi in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from httpx<1,>=0.23.0->openai) (2024.8.30)\n",
      "Requirement already satisfied: httpcore==1.* in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from httpx<1,>=0.23.0->openai) (1.0.2)\n",
      "Requirement already satisfied: h11<0.15,>=0.13 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from httpcore==1.*->httpx<1,>=0.23.0->openai) (0.14.0)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from pandas<3,>=1.3.0->streamlit) (2.9.0.post0)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from pandas<3,>=1.3.0->streamlit) (2024.1)\n",
      "Requirement already satisfied: tzdata>=2022.7 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from pandas<3,>=1.3.0->streamlit) (2023.3)\n",
      "Requirement already satisfied: annotated-types>=0.4.0 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from pydantic<3,>=1.9.0->openai) (0.6.0)\n",
      "Requirement already satisfied: pydantic-core==2.20.1 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from pydantic<3,>=1.9.0->openai) (2.20.1)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (3.3.2)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (2.2.3)\n",
      "Requirement already satisfied: markdown-it-py>=2.2.0 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from rich<14,>=10.14.0->streamlit) (2.2.0)\n",
      "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from rich<14,>=10.14.0->streamlit) (2.15.1)\n",
      "Requirement already satisfied: smmap<5,>=3.0.1 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.0)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from jinja2->altair<6,>=4.0->streamlit) (2.1.3)\n",
      "Requirement already satisfied: attrs>=22.2.0 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (23.1.0)\n",
      "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (2023.7.1)\n",
      "Requirement already satisfied: referencing>=0.28.4 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.30.2)\n",
      "Requirement already satisfied: rpds-py>=0.7.1 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.10.6)\n",
      "Requirement already satisfied: mdurl~=0.1 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from markdown-it-py>=2.2.0->rich<14,>=10.14.0->streamlit) (0.1.0)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\riyac\\anaconda3\\lib\\site-packages (from python-dateutil>=2.8.2->pandas<3,>=1.3.0->streamlit) (1.16.0)\n",
      "Downloading openai-1.78.1-py3-none-any.whl (680 kB)\n",
      "   ---------------------------------------- 0.0/680.9 kB ? eta -:--:--\n",
      "   ---------------------------------------- 680.9/680.9 kB 6.8 MB/s eta 0:00:00\n",
      "Downloading jiter-0.9.0-cp312-cp312-win_amd64.whl (207 kB)\n",
      "Installing collected packages: jiter, openai\n",
      "Successfully installed jiter-0.9.0 openai-1.78.1\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install openai streamlit\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f68f3a9e-c621-4e8a-84ff-bbc4fabb76b3",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-05-13 15:18:21.605 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\riyac\\anaconda3\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2025-05-13 15:18:21.605 Session state does not function when running a script without `streamlit run`\n"
     ]
    }
   ],
   "source": [
    "# LLM-Powered Quiz Generator Chatbot using OpenAI and Streamlit\n",
    "\n",
    "import openai\n",
    "import streamlit as st\n",
    "import os\n",
    "\n",
    "# Load your OpenAI API key from environment or set it here\n",
    "oai_key = os.getenv(\"OPENAI_API_KEY\") or \"your-api-key\"\n",
    "openai.api_key = oai_key\n",
    "\n",
    "st.title(\"ðŸ§  LLM Quiz Generator Chatbot\")\n",
    "\n",
    "st.markdown(\"\"\"\n",
    "This chatbot helps you generate custom quizzes using GPT-based models. Fill in the details below.\n",
    "\"\"\")\n",
    "\n",
    "# ------------------ INPUT GATHERING ------------------\n",
    "topic = st.text_input(\"Enter Quiz Topic (e.g., Quantum Physics)\")\n",
    "difficulty = st.selectbox(\"Select Difficulty\", [\"easy\", \"medium\", \"hard\"])\n",
    "num_questions = st.number_input(\"Number of Questions\", min_value=1, max_value=10, value=3)\n",
    "question_types = st.multiselect(\"Select Question Types\", [\"multiple choice\", \"short answer\", \"true/false\"])\n",
    "subtopics = st.text_input(\"Optional: Specific Sub-topics\")\n",
    "keywords = st.text_input(\"Optional: Context Keywords\")\n",
    "audience = st.text_input(\"Optional: Target Audience (e.g., Undergraduate Physics Students)\")\n",
    "language = st.text_input(\"Optional: Language (default: English)\", value=\"English\")\n",
    "include_explanations = st.radio(\"Include Explanations?\", [\"yes\", \"no\"])\n",
    "max_length = st.slider(\"Max Length per Question (words)\", 20, 100, 40)\n",
    "\n",
    "params = {\n",
    "    \"topic\": topic,\n",
    "    \"difficulty\": difficulty,\n",
    "    \"num_questions\": num_questions,\n",
    "    \"question_types\": question_types,\n",
    "    \"subtopics\": subtopics,\n",
    "    \"keywords\": keywords,\n",
    "    \"audience\": audience,\n",
    "    \"language\": language,\n",
    "    \"explanations\": include_explanations,\n",
    "    \"max_length\": max_length\n",
    "}\n",
    "\n",
    "if st.button(\"Generate Quiz\"):\n",
    "    with st.spinner(\"Generating quiz using OpenAI...\"):\n",
    "        prompt = f\"\"\"\n",
    "You are a quiz generation assistant. Create a quiz with the following settings:\n",
    "Topic: {params['topic']}\n",
    "Difficulty: {params['difficulty']}\n",
    "Number of Questions: {params['num_questions']}\n",
    "Question Types: {', '.join(params['question_types'])}\n",
    "Sub-topics: {params['subtopics']}\n",
    "Context Keywords: {params['keywords']}\n",
    "Target Audience: {params['audience']}\n",
    "Language: {params['language']}\n",
    "Include Explanations: {params['explanations']}\n",
    "Maximum Question Length: {params['max_length']} words\n",
    "Output format: For each question, include:\n",
    "- Question Text\n",
    "- Options (if applicable)\n",
    "- Correct Answer\n",
    "- Explanation (if enabled)\n",
    "\"\"\"\n",
    "\n",
    "        response = openai.ChatCompletion.create(\n",
    "            model=\"gpt-3.5-turbo\",\n",
    "            messages=[\n",
    "                {\"role\": \"system\", \"content\": \"You are a helpful quiz generator bot.\"},\n",
    "                {\"role\": \"user\", \"content\": prompt}\n",
    "            ],\n",
    "            temperature=0.7,\n",
    "            max_tokens=1000\n",
    "        )\n",
    "\n",
    "        result = response[\"choices\"][0][\"message\"][\"content\"]\n",
    "\n",
    "        st.subheader(\"ðŸ“‹ Generated Quiz\")\n",
    "        st.markdown(result.replace(\"\\n\", \"\\n\\n\"))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3d861b4d-3c59-4f5b-8c54-ff9025c297da",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-05-13 15:18:21.605 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\riyac\\anaconda3\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2025-05-13 15:18:21.605 Session state does not function when running a script without `streamlit run`\n"
     ]
    }
   ],
   "source": [
    "# LLM-Powered Quiz Generator Chatbot using OpenAI and Streamlit\n",
    "\n",
    "import openai\n",
    "import streamlit as st\n",
    "import os\n",
    "\n",
    "# Load your OpenAI API key from environment or set it here\n",
    "oai_key = os.getenv(\"OPENAI_API_KEY\") or \"your-api-key\"\n",
    "openai.api_key = oai_key\n",
    "\n",
    "st.title(\"ðŸ§  LLM Quiz Generator Chatbot\")\n",
    "\n",
    "st.markdown(\"\"\"\n",
    "This chatbot helps you generate custom quizzes using GPT-based models. Fill in the details below.\n",
    "\"\"\")\n",
    "\n",
    "# ------------------ INPUT GATHERING ------------------\n",
    "topic = st.text_input(\"Enter Quiz Topic (e.g., Quantum Physics)\")\n",
    "difficulty = st.selectbox(\"Select Difficulty\", [\"easy\", \"medium\", \"hard\"])\n",
    "num_questions = st.number_input(\"Number of Questions\", min_value=1, max_value=10, value=3)\n",
    "question_types = st.multiselect(\"Select Question Types\", [\"multiple choice\", \"short answer\", \"true/false\"])\n",
    "subtopics = st.text_input(\"Optional: Specific Sub-topics\")\n",
    "keywords = st.text_input(\"Optional: Context Keywords\")\n",
    "audience = st.text_input(\"Optional: Target Audience (e.g., Undergraduate Physics Students)\")\n",
    "language = st.text_input(\"Optional: Language (default: English)\", value=\"English\")\n",
    "include_explanations = st.radio(\"Include Explanations?\", [\"yes\", \"no\"])\n",
    "max_length = st.slider(\"Max Length per Question (words)\", 20, 100, 40)\n",
    "\n",
    "params = {\n",
    "    \"topic\": topic,\n",
    "    \"difficulty\": difficulty,\n",
    "    \"num_questions\": num_questions,\n",
    "    \"question_types\": question_types,\n",
    "    \"subtopics\": subtopics,\n",
    "    \"keywords\": keywords,\n",
    "    \"audience\": audience,\n",
    "    \"language\": language,\n",
    "    \"explanations\": include_explanations,\n",
    "    \"max_length\": max_length\n",
    "}\n",
    "\n",
    "if st.button(\"Generate Quiz\"):\n",
    "    with st.spinner(\"Generating quiz using OpenAI...\"):\n",
    "        prompt = f\"\"\"\n",
    "You are a quiz generation assistant. Create a quiz with the following settings:\n",
    "Topic: {params['topic']}\n",
    "Difficulty: {params['difficulty']}\n",
    "Number of Questions: {params['num_questions']}\n",
    "Question Types: {', '.join(params['question_types'])}\n",
    "Sub-topics: {params['subtopics']}\n",
    "Context Keywords: {params['keywords']}\n",
    "Target Audience: {params['audience']}\n",
    "Language: {params['language']}\n",
    "Include Explanations: {params['explanations']}\n",
    "Maximum Question Length: {params['max_length']} words\n",
    "Output format: For each question, include:\n",
    "- Question Text\n",
    "- Options (if applicable)\n",
    "- Correct Answer\n",
    "- Explanation (if enabled)\n",
    "\"\"\"\n",
    "\n",
    "        response = openai.ChatCompletion.create(\n",
    "            model=\"gpt-3.5-turbo\",\n",
    "            messages=[\n",
    "                {\"role\": \"system\", \"content\": \"You are a helpful quiz generator bot.\"},\n",
    "                {\"role\": \"user\", \"content\": prompt}\n",
    "            ],\n",
    "            temperature=0.7,\n",
    "            max_tokens=1000\n",
    "        )\n",
    "\n",
    "        result = response[\"choices\"][0][\"message\"][\"content\"]\n",
    "\n",
    "        st.subheader(\"ðŸ“‹ Generated Quiz\")\n",
    "        st.markdown(result.replace(\"\\n\", \"\\n\\n\"))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1c9b32aa-00c2-4984-be92-c6c65e50a273",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (147055417.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[7], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    streamlit run quiz_bot.py\u001b[0m\n\u001b[1;37m              ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "streamlit run quiz_bot.py\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "985b7f81-764c-4101-bd8f-6a385d744c83",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
